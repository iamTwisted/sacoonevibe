<?php\n\nnamespace App\\Models;\n\nuse App\\Events\\MemberApproved;\nuse App\Events\\MemberCreated;\nuse Illuminate\\Database\\Eloquent\\Concerns\\HasUuids;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasMany;\nuse Illuminate\\Database\\Eloquent\\Relations\\HasOne;\nuse Illuminate\\Support\\Facades\\DB;\n\nclass Member extends Model\n{\n    use HasFactory, HasUuids;\n\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array<int, string>\n     */\n    protected $fillable = [\n        \'branch_id\',\n        \'name\',\n        \'member_type\',\n        \'dob\',\n        \'gender\',\n        \'id_type\',\n        \'id_number\',\n        \'kra_pin\',\n        \'nin\',\n        \'email\',\n        \'phone\',\n        \'physical_address\',\n        \'postal_address\',\n        \'monthly_contribution\',\n        \'retirement_age\',\n        \'status\',\n        \'created_by\',\n        \'approved_by\',\n        \'approved_at\',\n        \'meta\',\n    ];\n\n    /**\n     * The attributes that should be cast.\n     *\n     * @var array<string, string>\n     */\n    protected $casts = [\n        \'meta\' => \'array\',\n        \'dob\' => \'date\',\n        \'approved_at\' => \'datetime\',\n    ];\n\n    /**\n     * The event map for the model.\n     *\n     * @var array\n     */\n    protected $dispatchesEvents = [\n        \'created\' => MemberCreated::class,\n    ];\n\n    /**\n     * The \\\"booted\\\" method of the model.\n     */\n    protected static function booted(): void\n    {\n        static::creating(function (Member $member) {\n            if (empty($member->member_no)) {\n                $member->member_no = self::generateMemberNumber($member->branch_id);\n            }\n        });\n\n        static::updating(function (Member $member) {\n            if ($member->isDirty(\'status\') && $member->status === \'active\') {\n                event(new MemberApproved($member));\n            }\n        });\n    }\n\n    /**\n     * Generate a unique member number for a given branch.\n     */\n    public static function generateMemberNumber(string $branchId): string\n    {\n        $branch = Branch::findOrFail($branchId);\n\n        DB::beginTransaction();\n\n        try {\n            $counter = DB::table(\'member_counters\')->where(\'branch_id\', $branch->id)->lockForUpdate()->first();\n\n            if (!$counter) {\n                $counter = new \\stdClass();\n                $counter->last_number = 0;\n                DB::table(\'member_counters\')->insert([\'branch_id\' => $branch->id, \'last_number\' => 1]);\n            } else {\n                DB::table(\'member_counters\')->where(\'branch_id\', $branch->id)->increment(\'last_number\');\n            }\n\n            DB::commit();\n\n            $newNumber = $counter->last_number + 1;\n\n            return sprintf(\'%s-%s-%06d\', $branch->code, date(\'Y\'), $newNumber);\n        } catch (\\Exception $e) {\n            DB::rollBack();\n            throw $e;\n        }\n    }\n\n    /**\n     * Get the branch that the member belongs to.\n     */\n    public function branch(): BelongsTo\n    {\n        return $this->belongsTo(Branch::class);\n    }\n\n    public function products(): BelongsToMany\n    {\n        return $this->belongsToMany(Product::class, \'member_product\');\n    }\n\n    /**\n     * Get the documents for the member.\n     */\n    public function documents(): HasMany\n    {\n        return $this->hasMany(MemberDocument::class);\n    }\n\n    /**\n     * Get the shares for the member.\n     */\n    public function shares(): HasMany\n    {\n        return $this->hasMany(MemberShare::class);\n    }\n\n    /**\n     * Get the beneficiaries for the member.\n     */\n    public function beneficiaries(): HasMany\n    {\n        return $this->hasMany(Beneficiary::class);\n    }\n\n    /**\n     * Get the RBA profile for the member.\n     */\n    public function rbaProfile(): HasOne\n    {\n        return $this->hasOne(MemberRbaProfile::class);\n    }\n\n    /**\n     * Get the retirement contributions for the member.\n     */\n    public function retirementContributions(): HasMany\n    {\n        return $this->hasMany(RetirementContribution::class);\n    }\n\n    /**\n     * Get the histories for the member.\n     */\n    public function histories(): HasMany\n    {\n        return $this->hasMany(MemberHistory::class);\n    }\n\n    /**\n     * Check if the member can submit their beneficiaries.\n     *\n     * @return bool\n     */\n    public function canSubmitBeneficiaries(): bool\n    {\n        if ($this->scheme_type !== \'retirement\') {\n            return true;\n        }\n\n        return $this->beneficiaries()->sum(\'share_percent\') == 100;\n    }\n}\n